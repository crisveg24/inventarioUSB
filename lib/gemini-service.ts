// Servicio para integraci√≥n con Google Gemini AI
export interface GeminiReportRequest {
  query: string;
  inventoryData: any[];
}

export interface GeminiReportResponse {
  filteredProducts: any[];
  reportTitle: string;
  reportDescription: string;
  criteria: string[];
}

const GEMINI_API_KEY = "AIzaSyBfevJcvq62SnaXd-K8yfuSY92SlbyHEXo";
const GEMINI_API_URL =
  "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-pro:generateContent";

export async function generateReportWithGemini(
  request: GeminiReportRequest
): Promise<GeminiReportResponse> {
  try {
    console.log("ü§ñ INICIANDO PETICI√ìN A GEMINI");
    console.log("üìä Consulta del usuario:", request.query);
    console.log("üì¶ Productos recibidos:", request.inventoryData.length);
    console.log("üîë API Key disponible:", GEMINI_API_KEY ? "S√ç" : "NO");

    // Validar datos de entrada
    if (!request.query || request.query.trim().length === 0) {
      throw new Error("La consulta est√° vac√≠a");
    }

    if (!request.inventoryData || request.inventoryData.length === 0) {
      throw new Error("No hay datos de inventario disponibles");
    }

    // Preparar el prompt optimizado para Gemini con limitaci√≥n de resultados
    const prompt = `IMPORTANTE: Debes responder √öNICAMENTE con un JSON v√°lido, sin texto adicional.

TAREA: Analizar la consulta del usuario y filtrar los productos del inventario seg√∫n sus criterios.
L√çMITE: Devuelve M√ÅXIMO 20 activos m√°s relevantes para mantener la respuesta concisa.

CONSULTA DEL USUARIO: "${request.query}"

ACTIVOS DE INFORMACI√ìN (${request.inventoryData.length} activos):
${JSON.stringify(request.inventoryData, null, 2)}

INSTRUCCIONES OBLIGATORIAS:
1. Analiza la consulta para entender qu√© activos necesita el usuario
2. Filtra los activos seg√∫n los criterios mencionados
3. Ordena por relevancia y devuelve solo los 20 m√°s importantes
4. Responde SOLO con el JSON en esta estructura exacta:

{
  "filteredProducts": [m√°ximo 20 activos que mejor coincidan con la consulta],
  "reportTitle": "T√≠tulo descriptivo del reporte",
  "reportDescription": "Descripci√≥n de lo que contiene el reporte",
  "criteria": ["criterio1", "criterio2", "criterio3"]
}

EJEMPLOS DE FILTRADO PARA ACTIVOS DE INFORMACI√ìN:
- "criticidad alta" o "cr√≠tico" = activos donde status === "out-of-stock" (representa alta criticidad)
- "criticidad media" o "disponibilidad limitada" = activos donde status === "low-stock" (criticidad media)
- "criticidad baja" = activos donde status === "in-stock" (baja criticidad)
- "tipo software" = activos donde category incluye "Software"
- "tipo hardware" = activos donde category incluye "Hardware" 
- "tipo informaci√≥n" = activos donde category incluye "Informaci√≥n"
- "responsable X" = activos donde supplier incluye la persona mencionada

MAPEO DE CONCEPTOS PARA ACTIVOS:
- quantity/minStock/status ‚Üí Niveles de criticidad y disponibilidad del activo
- category ‚Üí Tipo de activo (Software, Hardware, Informaci√≥n)
- supplier ‚Üí Responsable o due√±o del activo
- Los t√©rminos "stock" se interpretan como "criticidad" o "disponibilidad"

PRIORIDAD: Para consultas de criticidad, ordena por status: "out-of-stock" (cr√≠tico), "low-stock" (medio), "in-stock" (bajo).

RESPUESTA (SOLO JSON, SIN EXPLICACIONES):`;

    console.log("üìù Enviando prompt a Gemini...");

    const requestBody = {
      contents: [
        {
          parts: [
            {
              text: prompt,
            },
          ],
        },
      ],
      generationConfig: {
        temperature: 0.1,
        topK: 40,
        topP: 0.95,
        maxOutputTokens: 8192,
      },
    };

    const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(requestBody),
    });

    console.log("üì° Respuesta de Gemini recibida - Status:", response.status);

    if (!response.ok) {
      const errorText = await response.text();
      console.error("‚ùå Error en API Gemini:", errorText);
      throw new Error(
        `Error de API Gemini: ${response.status} ${response.statusText}`
      );
    }

    const data = await response.json();
    console.log("ü§ñ Respuesta completa de Gemini:", data);

    // Extraer el texto generado
    const generatedText = data.candidates?.[0]?.content?.parts?.[0]?.text;
    if (!generatedText) {
      throw new Error("Gemini no devolvi√≥ una respuesta v√°lida");
    }

    console.log("üìù Texto generado por Gemini:", generatedText);

    // Limpiar el texto para extraer solo el JSON
    let cleanedText = generatedText.trim();

    // Remover markdown y texto extra
    cleanedText = cleanedText.replace(/```json/g, "").replace(/```/g, "");

    // Encontrar el JSON con manejo mejorado para respuestas truncadas
    const firstBrace = cleanedText.indexOf("{");
    let lastBrace = cleanedText.lastIndexOf("}");

    if (firstBrace === -1) {
      throw new Error("No se encontr√≥ JSON v√°lido en la respuesta de Gemini");
    }

    // Si no se encuentra el cierre o la respuesta parece truncada, intentar reparar
    if (lastBrace === -1 || lastBrace <= firstBrace) {
      console.log("‚ö†Ô∏è JSON parece truncado, intentando reparar...");

      // Buscar el √∫ltimo objeto completo en la respuesta
      const textFromFirst = cleanedText.substring(firstBrace);

      // Intentar encontrar un punto donde el JSON podr√≠a estar completo
      const lastCompleteProduct = textFromFirst.lastIndexOf('"status": "');
      if (lastCompleteProduct !== -1) {
        // Buscar el cierre de ese producto
        const afterStatus = textFromFirst.substring(lastCompleteProduct);
        const nextBrace = afterStatus.indexOf("}");
        if (nextBrace !== -1) {
          // Reconstruir el JSON v√°lido
          const repairedJson =
            textFromFirst.substring(0, lastCompleteProduct + nextBrace + 1) +
            "\n    ]\n  }\n}";
          cleanedText = cleanedText.substring(0, firstBrace) + repairedJson;
          lastBrace = cleanedText.lastIndexOf("}");
        }
      }
    }

    const jsonText = cleanedText.substring(firstBrace, lastBrace + 1);
    console.log(
      "üîç JSON extra√≠do:",
      jsonText.length > 1000
        ? jsonText.substring(0, 500) +
            "...[TRUNCADO]..." +
            jsonText.substring(jsonText.length - 500)
        : jsonText
    );

    // Parsear el JSON
    let result;
    try {
      result = JSON.parse(jsonText);
    } catch (parseError) {
      console.error("‚ùå Error parseando JSON:", parseError);
      console.error(
        "üìù JSON problem√°tico:",
        jsonText.substring(jsonText.length - 200)
      );
      throw new Error("La respuesta de Gemini no es un JSON v√°lido");
    }

    // Validar estructura
    if (!result.filteredProducts || !Array.isArray(result.filteredProducts)) {
      throw new Error("La respuesta de Gemini no tiene la estructura correcta");
    }

    console.log("‚úÖ Reporte generado exitosamente por Gemini:");
    console.log("ÔøΩ Productos filtrados:", result.filteredProducts.length);
    console.log("üìã T√≠tulo:", result.reportTitle);
    console.log("üéØ Criterios:", result.criteria);

    return {
      filteredProducts: result.filteredProducts,
      reportTitle: result.reportTitle || "Reporte Personalizado",
      reportDescription: result.reportDescription || "Reporte generado con IA",
      criteria: result.criteria || ["Filtrado con IA"],
    };
  } catch (error) {
    console.error("‚ùå Error en generateReportWithGemini:", error);

    // Re-lanzar el error para que se maneje en el componente
    if (error instanceof Error) {
      throw error;
    } else {
      throw new Error("Error desconocido al generar el reporte con IA");
    }
  }
}

// Funci√≥n auxiliar para validar el formato de la consulta
export function validateQuery(query: string): string[] {
  const errors: string[] = [];

  if (!query || query.trim().length < 5) {
    errors.push("La consulta debe tener al menos 5 caracteres");
  }

  if (query.length > 500) {
    errors.push("La consulta no puede exceder 500 caracteres");
  }

  return errors;
}

// Funci√≥n para generar sugerencias de consultas
export function getQuerySuggestions(): string[] {
  return [
    "Mu√©strame todos los activos con criticidad alta",
    "Dame los activos de software con disponibilidad limitada",
    "Activos de informaci√≥n con confidencialidad alta",
    "Todos los activos cr√≠ticos para revisi√≥n inmediata",
    "Activos de hardware administrados por sistemas",
    "Software con criticidad media ordenados por responsable",
    "Activos de informaci√≥n del proceso de contabilidad",
  ];
}
